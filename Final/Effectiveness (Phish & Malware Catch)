//mega-big uber query for overall effectiveness numbers
let _startTime = datetime(2025-01-01);
let _endTime = datetime(2024-01-06);
let Mal_Phish_Mailflow = toscalar(
EmailEvents
| where Timestamp between (_startTime .. _endTime)
| where EmailDirection == "Inbound"
| extend MDO_detection = parse_json(DetectionMethods)
| extend FirstDetection = iif(isempty(MDO_detection), "Clean", tostring(bag_keys(MDO_detection)[0]))
| extend FirstSubcategory = iif(FirstDetection != "Clean" and array_length(MDO_detection[FirstDetection]) > 0, strcat(FirstDetection, ": ", tostring(MDO_detection[FirstDetection][0])), "No Detection (clean)")
| where FirstSubcategory contains "Malware" or FirstSubcategory contains "Phish"
| summarize count(NetworkMessageId)
);
let FP_ZAP = toscalar(
EmailPostDeliveryEvents
| where ActionType == "Redelivery" and ThreatTypes !contains "Phish" and ThreatTypes !contains "Malware" and Timestamp between (_startTime .._endTime )
| join kind=leftsemi (
            EmailEvents
            | where Timestamp between (_startTime .._endTime )
            | where ThreatTypes contains "Phish" or ThreatTypes contains "Malware"
            | project NetworkMessageId, ThreatTypes)
            on NetworkMessageId
| summarize count(NetworkMessageId)
);
let FN_ZAP_Successful = toscalar(
EmailPostDeliveryEvents
| where ActionType in ("Malware ZAP","Phish ZAP") and Timestamp between (_startTime .._endTime )and ActionResult in ("Success","AdminPolicy")
|join kind=leftsemi (
EmailEvents
| where ThreatTypes !contains "Phish" and ThreatTypes !contains "Malware"
| where Timestamp between (_startTime .._endTime))
on NetworkMessageId
| summarize count(NetworkMessageId)
);
let FN_ZAP_Unsuccessful = toscalar(
EmailPostDeliveryEvents
| where ActionType in ("Malware ZAP","Phish ZAP") and Timestamp between (_startTime .._endTime )and ActionResult !in ("Success","AdminPolicy")
|join kind=leftsemi (
EmailEvents
| where ThreatTypes !contains "Phish" and ThreatTypes !contains "Malware"
| where Timestamp between (_startTime .._endTime))
on NetworkMessageId
| summarize count(NetworkMessageId)
);
let FN_Admin_Submissions = toscalar(
CloudAppEvents
| where Timestamp between (_startTime .._endTime)
| where ActionType == "AdminSubmissionSubmitted"
| extend SubmissionType = tostring((parse_json(RawEventData)).SubmissionType)
| extend NetworkMessageId = tostring((parse_json(RawEventData)).ObjectId)
| where SubmissionType in ("1","2")
|join kind=rightsemi (
 EmailEvents
| where ThreatTypes !contains "Phish" and ThreatTypes !contains "Malware"
| where Timestamp between (_startTime .._endTime))
on NetworkMessageId
| summarize count(NetworkMessageId)
);
union withsource=Table
    (print StatisticName="Mal/Phish Mailflow totals - Minus FPs", Value=toreal((toscalar(Mal_Phish_Mailflow))-toreal(toscalar(FP_ZAP)))),
    (print StatisticName="Admin Mal/Phish FNs Submitted", Value=toreal(toscalar(FN_Admin_Submissions))),
    (print StatisticName="Mal/Phish FPs Reverse Zapped", Value=toreal(toscalar(FP_ZAP))),
    (print StatisticName="Mal / Phish Successfully Zapped", Value=toreal(toscalar(FN_ZAP_Successful))),
    (print StatisticName="Mal / Phish UN-Successfully Zapped", Value=toreal(toscalar(FN_ZAP_Unsuccessful))),
    (print StatisticName="Effectiveness Post Delivery", Value=abs(round(((toreal(toscalar(FN_Admin_Submissions))+toreal(toscalar(FN_ZAP_Unsuccessful)))/(toreal(toscalar(Mal_Phish_Mailflow))+toreal(toscalar(FN_ZAP_Successful))+toreal(toscalar(FN_ZAP_Unsuccessful))+toreal(toscalar(FN_Admin_Submissions))-toreal(toscalar(FP_ZAP)))*100-100),2))),
    (print StatisticName="Effectiveness Pre-Delivery", Value=abs(round(((toreal(toscalar(FN_Admin_Submissions))+toreal(toscalar(FN_ZAP_Unsuccessful))+(toscalar(FN_ZAP_Successful)))/(toreal(toscalar(Mal_Phish_Mailflow))+toreal(toscalar(FN_ZAP_Successful))+toreal(toscalar(FN_ZAP_Unsuccessful))+toreal(toscalar(FN_Admin_Submissions))-toreal(toscalar(FP_ZAP)))*100-100),2)))
| project StatisticName, Value
